// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entity "task-manager/internal/model/entity"

	mock "github.com/stretchr/testify/mock"
)

// IService is an autogenerated mock type for the IService type
type IService struct {
	mock.Mock
}

// GetNumberOfWeek provides a mock function with given fields:
func (_m *IService) GetNumberOfWeek() (entity.Week, error) {
	ret := _m.Called()

	var r0 entity.Week
	var r1 error
	if rf, ok := ret.Get(0).(func() (entity.Week, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() entity.Week); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(entity.Week)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlanning provides a mock function with given fields:
func (_m *IService) GetPlanning() ([]entity.Developer, error) {
	ret := _m.Called()

	var r0 []entity.Developer
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.Developer, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.Developer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Developer)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIService creates a new instance of IService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIService(t mockConstructorTestingTNewIService) *IService {
	mock := &IService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entity "task-manager/internal/model/entity"

	mock "github.com/stretchr/testify/mock"
)

// ITask is an autogenerated mock type for the ITask type
type ITask struct {
	mock.Mock
}

// ConvertAll provides a mock function with given fields: body
func (_m *ITask) ConvertAll(body []byte) ([]entity.Task, error) {
	ret := _m.Called(body)

	var r0 []entity.Task
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]entity.Task, error)); ok {
		return rf(body)
	}
	if rf, ok := ret.Get(0).(func([]byte) []entity.Task); ok {
		r0 = rf(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Task)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewITask interface {
	mock.TestingT
	Cleanup(func())
}

// NewITask creates a new instance of ITask. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewITask(t mockConstructorTestingTNewITask) *ITask {
	mock := &ITask{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
